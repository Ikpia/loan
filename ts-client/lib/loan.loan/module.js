// Generated by Ignite ignite.com/cli
import { SigningStargateClient } from "@cosmjs/stargate";
import { Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { Api } from "./rest";
import { QueryParamsResponse } from "./types/loan/loan/query";
import { Loan } from "./types/loan/loan/loan";
import { QueryParamsRequest } from "./types/loan/loan/query";
import { QueryGetLoanResponse } from "./types/loan/loan/query";
import { MsgLiquidateLoan } from "./types/loan/loan/tx";
import { MsgApproveLoan } from "./types/loan/loan/tx";
import { GenesisState } from "./types/loan/loan/genesis";
import { Params } from "./types/loan/loan/params";
import { QueryAllLoanResponse } from "./types/loan/loan/query";
import { MsgApproveLoanResponse } from "./types/loan/loan/tx";
import { MsgRepayLoanResponse } from "./types/loan/loan/tx";
import { MsgLiquidateLoanResponse } from "./types/loan/loan/tx";
import { MsgCancelLoanResponse } from "./types/loan/loan/tx";
import { MsgUpdateParamsResponse } from "./types/loan/loan/tx";
import { MsgRequestLoanResponse } from "./types/loan/loan/tx";
import { MsgUpdateParams } from "./types/loan/loan/tx";
import { QueryGetLoanRequest } from "./types/loan/loan/query";
import { QueryAllLoanRequest } from "./types/loan/loan/query";
import { MsgRepayLoan } from "./types/loan/loan/tx";
import { MsgRequestLoan } from "./types/loan/loan/tx";
import { MsgCancelLoan } from "./types/loan/loan/tx";
export { QueryParamsResponse, Loan, QueryParamsRequest, QueryGetLoanResponse, MsgLiquidateLoan, MsgApproveLoan, GenesisState, Params, QueryAllLoanResponse, MsgApproveLoanResponse, MsgRepayLoanResponse, MsgLiquidateLoanResponse, MsgCancelLoanResponse, MsgUpdateParamsResponse, MsgRequestLoanResponse, MsgUpdateParams, QueryGetLoanRequest, QueryAllLoanRequest, MsgRepayLoan, MsgRequestLoan, MsgCancelLoan };
export const registry = new Registry(msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
export const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendLoan({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendLoan: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.loan({ value: Loan.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendLoan: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetLoanResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetLoanResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryGetLoanResponse({ value: QueryGetLoanResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetLoanResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgLiquidateLoan({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgLiquidateLoan: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgLiquidateLoan({ value: MsgLiquidateLoan.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgLiquidateLoan: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgApproveLoan({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgApproveLoan: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgApproveLoan({ value: MsgApproveLoan.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgApproveLoan: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.genesisState({ value: GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.params({ value: Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllLoanResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllLoanResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryAllLoanResponse({ value: QueryAllLoanResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllLoanResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgApproveLoanResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgApproveLoanResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgApproveLoanResponse({ value: MsgApproveLoanResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgApproveLoanResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRepayLoanResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRepayLoanResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgRepayLoanResponse({ value: MsgRepayLoanResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRepayLoanResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgLiquidateLoanResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgLiquidateLoanResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgLiquidateLoanResponse({ value: MsgLiquidateLoanResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgLiquidateLoanResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCancelLoanResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCancelLoanResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgCancelLoanResponse({ value: MsgCancelLoanResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCancelLoanResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRequestLoanResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRequestLoanResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgRequestLoanResponse({ value: MsgRequestLoanResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRequestLoanResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetLoanRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetLoanRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryGetLoanRequest({ value: QueryGetLoanRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetLoanRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllLoanRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllLoanRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryAllLoanRequest({ value: QueryAllLoanRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllLoanRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRepayLoan({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRepayLoan: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgRepayLoan({ value: MsgRepayLoan.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRepayLoan: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRequestLoan({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRequestLoan: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgRequestLoan({ value: MsgRequestLoan.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRequestLoan: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCancelLoan({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCancelLoan: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgCancelLoan({ value: MsgCancelLoan.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCancelLoan: Could not broadcast Tx: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/loan.loan.QueryParamsResponse", value: QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
        loan({ value }) {
            try {
                return { typeUrl: "/loan.loan.Loan", value: Loan.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Loan: Could not create message: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/loan.loan.QueryParamsRequest", value: QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        queryGetLoanResponse({ value }) {
            try {
                return { typeUrl: "/loan.loan.QueryGetLoanResponse", value: QueryGetLoanResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetLoanResponse: Could not create message: ' + e.message);
            }
        },
        msgLiquidateLoan({ value }) {
            try {
                return { typeUrl: "/loan.loan.MsgLiquidateLoan", value: MsgLiquidateLoan.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgLiquidateLoan: Could not create message: ' + e.message);
            }
        },
        msgApproveLoan({ value }) {
            try {
                return { typeUrl: "/loan.loan.MsgApproveLoan", value: MsgApproveLoan.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgApproveLoan: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/loan.loan.GenesisState", value: GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/loan.loan.Params", value: Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        queryAllLoanResponse({ value }) {
            try {
                return { typeUrl: "/loan.loan.QueryAllLoanResponse", value: QueryAllLoanResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllLoanResponse: Could not create message: ' + e.message);
            }
        },
        msgApproveLoanResponse({ value }) {
            try {
                return { typeUrl: "/loan.loan.MsgApproveLoanResponse", value: MsgApproveLoanResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgApproveLoanResponse: Could not create message: ' + e.message);
            }
        },
        msgRepayLoanResponse({ value }) {
            try {
                return { typeUrl: "/loan.loan.MsgRepayLoanResponse", value: MsgRepayLoanResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRepayLoanResponse: Could not create message: ' + e.message);
            }
        },
        msgLiquidateLoanResponse({ value }) {
            try {
                return { typeUrl: "/loan.loan.MsgLiquidateLoanResponse", value: MsgLiquidateLoanResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgLiquidateLoanResponse: Could not create message: ' + e.message);
            }
        },
        msgCancelLoanResponse({ value }) {
            try {
                return { typeUrl: "/loan.loan.MsgCancelLoanResponse", value: MsgCancelLoanResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCancelLoanResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/loan.loan.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        msgRequestLoanResponse({ value }) {
            try {
                return { typeUrl: "/loan.loan.MsgRequestLoanResponse", value: MsgRequestLoanResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRequestLoanResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/loan.loan.MsgUpdateParams", value: MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        queryGetLoanRequest({ value }) {
            try {
                return { typeUrl: "/loan.loan.QueryGetLoanRequest", value: QueryGetLoanRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetLoanRequest: Could not create message: ' + e.message);
            }
        },
        queryAllLoanRequest({ value }) {
            try {
                return { typeUrl: "/loan.loan.QueryAllLoanRequest", value: QueryAllLoanRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllLoanRequest: Could not create message: ' + e.message);
            }
        },
        msgRepayLoan({ value }) {
            try {
                return { typeUrl: "/loan.loan.MsgRepayLoan", value: MsgRepayLoan.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRepayLoan: Could not create message: ' + e.message);
            }
        },
        msgRequestLoan({ value }) {
            try {
                return { typeUrl: "/loan.loan.MsgRequestLoan", value: MsgRequestLoan.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRequestLoan: Could not create message: ' + e.message);
            }
        },
        msgCancelLoan({ value }) {
            try {
                return { typeUrl: "/loan.loan.MsgCancelLoan", value: MsgCancelLoan.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCancelLoan: Could not create message: ' + e.message);
            }
        },
    };
};
export const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new Api({ baseURL: addr });
};
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = queryClient({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = txClient({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            LoanLoan: new SDKModule(test)
        },
        registry: msgTypes
    };
};
export default IgntModule;
